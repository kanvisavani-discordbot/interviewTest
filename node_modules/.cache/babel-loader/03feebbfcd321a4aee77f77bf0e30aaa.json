{"ast":null,"code":"var _jsxFileName = \"D:\\\\D Drive\\\\Kanvi\\\\bt_interview\\\\src\\\\components\\\\EventHangouts\\\\EventHangouts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EventHangouts = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [events, setEvents] = useState([]);\n\n  const chkValue = (userId, eventId, dateId, eventUserId) => {\n    if (eventId == dateId && userId == eventUserId) return true;else return false;\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:4449/getUsers\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      debugger;\n      setItems(result);\n      fetch(\"http://localhost:4449/getEventDates\").then(res => res.json()).then(result => {\n        setIsLoaded(true);\n        debugger;\n        setDates(result);\n        fetch(\"http://localhost:4449/getEvents\").then(res => res.json()).then(result => {\n          setIsLoaded(true);\n          debugger;\n          setEvents(result);\n        });\n      });\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is the description of the hangout.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), dates.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [date.eventDate, \" \", date.eventTime]\n            }, date.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [dates.map(date => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 55\n              }, this)\n            }, date.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 37\n            }, this)), \"}\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 37\n            }, this), dates.map(date => events.map(event => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: chkValue(item.id, event.eventDate_id, date.id, event.user_id),\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 45\n            }, this)))]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/hangoutList\",\n        onClick: sendData,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_s(EventHangouts, \"NrRCQXktghXiE52ollFgGH1j1WQ=\");\n\n_c = EventHangouts;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventHangouts\");","map":{"version":3,"sources":["D:/D Drive/Kanvi/bt_interview/src/components/EventHangouts/EventHangouts.js"],"names":["React","useState","useEffect","axios","EventHangouts","error","setError","isLoaded","setIsLoaded","items","setItems","dates","setDates","events","setEvents","chkValue","userId","eventId","dateId","eventUserId","fetch","then","res","json","result","message","map","date","eventDate","eventTime","id","item","Name","event","eventDate_id","user_id","sendData"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\r\nimport axios from \"axios\";\r\n\r\n export const EventHangouts =()=>{\r\n     const [error, setError] = useState(null);\r\n     const [isLoaded, setIsLoaded] = useState(false);\r\n     const [items, setItems] = useState([]);\r\n     const [dates, setDates] = useState([]);\r\n     const [events, setEvents] = useState([]);\r\n\r\n     const chkValue = (userId,eventId,dateId,eventUserId)=>{\r\n         if(eventId == dateId && userId == eventUserId)\r\n             return true\r\n         else\r\n             return false\r\n     }\r\n\r\n     useEffect(() => {\r\n         fetch(\"http://localhost:4449/getUsers\")\r\n             .then(res => res.json())\r\n             .then(\r\n                 (result) => {\r\n                     setIsLoaded(true);\r\n                     debugger;\r\n                     setItems(result);\r\n                     fetch(\"http://localhost:4449/getEventDates\")\r\n                         .then(res => res.json())\r\n                         .then(\r\n                             (result) => {\r\n                                 setIsLoaded(true);\r\n                                 debugger;\r\n                                 setDates(result);\r\n                                 fetch(\"http://localhost:4449/getEvents\")\r\n                                     .then(res => res.json())\r\n                                     .then(\r\n                                         (result) => {\r\n                                             setIsLoaded(true);\r\n                                             debugger;\r\n                                             setEvents(result);\r\n                                         })\r\n                             })\r\n                 },\r\n                 (error) => {\r\n                     setIsLoaded(true);\r\n                     setError(error);\r\n                 }\r\n             )\r\n     }, [])\r\n          if (error) {\r\n         return <div>Error: {error.message}</div>;\r\n     } else if (!isLoaded) {\r\n         return <div>Loading...</div>;\r\n     } else {\r\n         return (\r\n                <div>\r\n                    <p>This is the description of the hangout.</p>\r\n                    <label>Name:</label>\r\n                    <input type=\"text\"/>\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            {\r\n                                dates.map(date=> (\r\n                                        <th key={date.id}>{date.eventDate} {date.eventTime}</th>\r\n                                ))}\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            {\r\n                                dates.map(date=> (\r\n                                    <td key={date.id}><input type=\"checkbox\" /></td>\r\n                                ))}\r\n                            }\r\n                        </tr>\r\n                        {\r\n                            items.map(item=> (\r\n                                <tr key={item.id}>\r\n                                    <td>{item.Name}</td>\r\n                                    {dates.map(date=>(\r\n                                    events.map(event =>(\r\n                                            <td><input type=\"checkbox\" checked={chkValue(item.id,event.eventDate_id,date.id,event.user_id)} disabled={true}/></td>\r\n                                        ))))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <Link to=\"/hangoutList\" onClick={sendData}>Done</Link>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}